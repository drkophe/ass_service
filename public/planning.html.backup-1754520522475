<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Gestion des Places - Planning</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.5/socket.io.js"></script>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <nav>
        <div class="navigation">
            <a href="/" class="nav-link">Demandes</a>
            <a href="/salle" class="nav-link">Salle</a>
            <a href="/planning" class="nav-link active">Planning</a>
        </div>
    </nav>
    
    <div class="container">
        <!-- En-t√™te avec s√©lection utilisateur et jour -->
        <div class="planning-header">
            <div class="planning-controls">
                <div class="user-selector">
                    <label for="userFilter">Utilisateur :</label>
                    <select id="userFilter" onchange="filterByUser()">
                        <option value="all">Tous les utilisateurs</option>
                        <option value="ALLOWAKINOU Serge">ALLOWAKINOU Serge</option>
                        <option value="AMBROISE Kevin">AMBROISE Kevin</option>
                        <option value="BAZARD Gwen">BAZARD Gwen</option>
                        <option value="BEIGNEUX Hugo">BEIGNEUX Hugo</option>
                        <option value="BILLIERE Cl√©ment">BILLIERE Cl√©ment</option>
                        <option value="BOSI Lorenzo">BOSI Lorenzo</option>
                        <option value="BOUILLER Laurent">BOUILLER Laurent</option>
                        <option value="BOYER Fabien">BOYER Fabien</option>
                        <option value="BREARD Fr√©d√©rique">BREARD Fr√©d√©rique</option>
                        <option value="COUCHY-ROMAIN Rony">COUCHY-ROMAIN Rony</option>
                        <option value="DAMYS Geoffrey">DAMYS Geoffrey</option>
                        <option value="DJANTA Leonard">DJANTA Leonard</option>
                        <option value="DJONFO Sylvio">DJONFO Sylvio</option>
                        <option value="DUCH√àNE Mathieu">DUCH√àNE Mathieu</option>
                        <option value="FEBRISSY Jason">FEBRISSY Jason</option>
                        <option value="FORTUN√â Nicolas">FORTUN√â Nicolas</option>
                        <option value="GILBERT Fabrice">GILBERT Fabrice</option>
                        <option value="JEAN Thierry">JEAN Thierry</option>
                        <option value="KHALED Jason">KHALED Jason</option>
                        <option value="KONAN Josu√©">KONAN Josu√©</option>
                        <option value="KONAN Justin">KONAN Justin</option>
                        <option value="KOULONI Yannick">KOULONI Yannick</option>
                        <option value="KOUNI Espoir">KOUNI Espoir</option>
                        <option value="LADAS Georges">LADAS Georges</option>
                        <option value="LADAS Killian">LADAS Killian</option>
                        <option value="LALANDE Samuel">LALANDE Samuel</option>
                        <option value="LE STANG Sylvain">LE STANG Sylvain</option>
                        <option value="LEJEUNE Rapha√´l">LEJEUNE Rapha√´l</option>
                        <option value="LESAGE Adrien">LESAGE Adrien</option>
                        <option value="LINA Thierry">LINA Thierry</option>
                        <option value="LOHATOD√â Isaac">LOHATOD√â Isaac</option>
                        <option value="LUCE Franck">LUCE Franck</option>
                        <option value="MAPOLIN Gilbert">MAPOLIN Gilbert</option>
                        <option value="MATUSZAK Benjamin">MATUSZAK Benjamin</option>
                        <option value="MEDINA Mathieu">MEDINA Mathieu</option>
                        <option value="MEILLER Neal">MEILLER Neal</option>
                        <option value="MESSUD Jeremie">MESSUD Jeremie</option>
                        <option value="MILLI√àRE Adriel">MILLI√àRE Adriel</option>
                        <option value="MIZ√àLE Sohann">MIZ√àLE Sohann</option>
                        <option value="MONDOLUS Olondieu">MONDOLUS Olondieu</option>
                        <option value="MOPALIN Gilbert">MOPALIN Gilbert</option>
                        <option value="MOUELLE Louis">MOUELLE Louis</option>
                        <option value="NGOMA Maxence">NGOMA Maxence</option>
                        <option value="NGOMA Vince">NGOMA Vince</option>
                        <option value="NJANTA L√©onard">NJANTA L√©onard</option>
                        <option value="NSONGA Jonathan">NSONGA Jonathan</option>
                        <option value="ONCOMODE Andrew">ONCOMODE Andrew</option>
                        <option value="PAMBOU Loic">PAMBOU Loic</option>
                        <option value="PINARD Johan">PINARD Johan</option>
                        <option value="RABIN S√©bastien">RABIN S√©bastien</option>
                        <option value="RABIN Timothy">RABIN Timothy</option>
                        <option value="RAINASOA Fitia">RAINASOA Fitia</option>
                        <option value="RAINASOA Naina">RAINASOA Naina</option>
                        <option value="SON√â KELLE Axel">SON√â KELLE Axel</option>
                        <option value="TABET Jason">TABET Jason</option>
                        <option value="TIMOTH√âE Vanden">TIMOTH√âE Vanden</option>
                        <option value="TOUROUDE John">TOUROUDE John</option>
                        <option value="VAN DE CASTELE Simon">VAN DE CASTELE Simon</option>
                        <option value="VANDENBUSSCHE Timoth√©e">VANDENBUSSCHE Timoth√©e</option>
                        <option value="VARATAJAN Seron">VARATAJAN Seron</option>
                        <option value="VELOSO Enzo">VELOSO Enzo</option>
                        <option value="VOITIER Manoah">VOITIER Manoah</option>
                        </select>
                </div>
                
                <div class="day-selector">
                    <button class="day-btn active" onclick="selectDay('vendredi')">Vendredi</button>
                    <button class="day-btn" onclick="selectDay('samedi')">Samedi</button>
                    <button class="day-btn" onclick="selectDay('dimanche')">Dimanche</button>
                </div>
                
                <button class="btn btn-admin" onclick="openAdminModal()">üîê Admin</button>
            </div>
        </div>
        
        <!-- L√©gende des services - MISE √Ä JOUR avec les 3 nouveaux services -->
        <div class="services-legend">
            <h3>üìã Services</h3>
            <div class="services-list">
                <div class="service-item">
                    <span class="service-color" style="background-color: #3498db;"></span>
                    <span>Porte 1</span>
                </div>
                <div class="service-item">
                    <span class="service-color" style="background-color: #2ecc71;"></span>
                    <span>Porte 2</span>
                </div>
                <div class="service-item">
                    <span class="service-color" style="background-color: #9b59b6;"></span>
                    <span>Pr√©sidence</span>
                </div>
            </div>
        </div>
        
        <!-- Planning principal -->
        <div class="planning-container">
            <div class="planning-grid" id="planningGrid">
                <!-- Le planning sera g√©n√©r√© dynamiquement ici -->
            </div>
        </div>
        
        <!-- Avertissement pour la production -->
        <div id="productionWarning" class="production-warning" style="display: none;">
            <p>‚ö†Ô∏è <strong>Mode production</strong> : Les donn√©es du planning sont stock√©es temporairement en m√©moire et seront perdues au prochain red√©marrage du serveur.</p>
        </div>
    </div>
    
    <!-- Modal Admin -->
    <div class="modal-overlay" id="adminModalOverlay" onclick="closeAdminModal()">
        <div class="modal admin-modal" onclick="event.stopPropagation()">
            <div class="modal-header">
                <h3>üîê Administration du Planning</h3>
                <button class="btn-close" onclick="closeAdminModal()">‚úñ</button>
            </div>
            <div class="modal-body" id="adminModalBody">
                <!-- Formulaire de connexion -->
                <div id="adminLogin">
                    <div class="form-group">
                        <label for="adminPassword">Mot de passe administrateur</label>
                        <input type="password" id="adminPassword" placeholder="Entrez le mot de passe">
                    </div>
                    <button class="btn btn-primary" onclick="adminLogin()">Se connecter</button>
                </div>
                
                <!-- Interface d'√©dition (cach√©e par d√©faut) -->
                <div id="adminInterface" style="display: none;">
                    <div class="admin-controls">
                        <h4>Ajouter/Modifier une affectation</h4>
                        
                        <div class="form-group">
                            <label>Jour</label>
                            <select id="adminDay">
                                <option value="vendredi">Vendredi</option>
                                <option value="samedi">Samedi</option>
                                <option value="dimanche">Dimanche</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label>Utilisateur</label>
                            <select id="adminUser">
                            <option value="">S√©lectionner un utilisateur</option>
                            <option value="ALLOWAKINOU Serge">ALLOWAKINOU Serge</option>
                            <option value="AMBROISE Kevin">AMBROISE Kevin</option>
                            <option value="BAZARD Gwen">BAZARD Gwen</option>
                            <option value="BEIGNEUX Hugo">BEIGNEUX Hugo</option>
                            <option value="BILLIERE Cl√©ment">BILLIERE Cl√©ment</option>
                            <option value="BOSI Lorenzo">BOSI Lorenzo</option>
                            <option value="BOUILLER Laurent">BOUILLER Laurent</option>
                            <option value="BOYER Fabien">BOYER Fabien</option>
                            <option value="BREARD Fr√©d√©rique">BREARD Fr√©d√©rique</option>
                            <option value="COUCHY-ROMAIN Rony">COUCHY-ROMAIN Rony</option>
                            <option value="DAMYS Geoffrey">DAMYS Geoffrey</option>
                            <option value="DJANTA Leonard">DJANTA Leonard</option>
                            <option value="DJONFO Sylvio">DJONFO Sylvio</option>
                            <option value="DUCH√àNE Mathieu">DUCH√àNE Mathieu</option>
                            <option value="FEBRISSY Jason">FEBRISSY Jason</option>
                            <option value="FORTUN√â Nicolas">FORTUN√â Nicolas</option>
                            <option value="GILBERT Fabrice">GILBERT Fabrice</option>
                            <option value="JEAN Thierry">JEAN Thierry</option>
                            <option value="KHALED Jason">KHALED Jason</option>
                            <option value="KONAN Josu√©">KONAN Josu√©</option>
                            <option value="KONAN Justin">KONAN Justin</option>
                            <option value="KOULONI Yannick">KOULONI Yannick</option>
                            <option value="KOUNI Espoir">KOUNI Espoir</option>
                            <option value="LADAS Georges">LADAS Georges</option>
                            <option value="LADAS Killian">LADAS Killian</option>
                            <option value="LALANDE Samuel">LALANDE Samuel</option>
                            <option value="LE STANG Sylvain">LE STANG Sylvain</option>
                            <option value="LEJEUNE Rapha√´l">LEJEUNE Rapha√´l</option>
                            <option value="LESAGE Adrien">LESAGE Adrien</option>
                            <option value="LINA Thierry">LINA Thierry</option>
                            <option value="LOHATOD√â Isaac">LOHATOD√â Isaac</option>
                            <option value="LUCE Franck">LUCE Franck</option>
                            <option value="MAPOLIN Gilbert">MAPOLIN Gilbert</option>
                            <option value="MATUSZAK Benjamin">MATUSZAK Benjamin</option>
                            <option value="MEDINA Mathieu">MEDINA Mathieu</option>
                            <option value="MEILLER Neal">MEILLER Neal</option>
                            <option value="MESSUD Jeremie">MESSUD Jeremie</option>
                            <option value="MILLI√àRE Adriel">MILLI√àRE Adriel</option>
                            <option value="MIZ√àLE Sohann">MIZ√àLE Sohann</option>
                            <option value="MONDOLUS Olondieu">MONDOLUS Olondieu</option>
                            <option value="MOPALIN Gilbert">MOPALIN Gilbert</option>
                            <option value="MOUELLE Louis">MOUELLE Louis</option>
                            <option value="NGOMA Maxence">NGOMA Maxence</option>
                            <option value="NGOMA Vince">NGOMA Vince</option>
                            <option value="NJANTA L√©onard">NJANTA L√©onard</option>
                            <option value="NSONGA Jonathan">NSONGA Jonathan</option>
                            <option value="ONCOMODE Andrew">ONCOMODE Andrew</option>
                            <option value="PAMBOU Loic">PAMBOU Loic</option>
                            <option value="PINARD Johan">PINARD Johan</option>
                            <option value="RABIN S√©bastien">RABIN S√©bastien</option>
                            <option value="RABIN Timothy">RABIN Timothy</option>
                            <option value="RAINASOA Fitia">RAINASOA Fitia</option>
                            <option value="RAINASOA Naina">RAINASOA Naina</option>
                            <option value="SON√â KELLE Axel">SON√â KELLE Axel</option>
                            <option value="TABET Jason">TABET Jason</option>
                            <option value="TIMOTH√âE Vanden">TIMOTH√âE Vanden</option>
                            <option value="TOUROUDE John">TOUROUDE John</option>
                            <option value="VAN DE CASTELE Simon">VAN DE CASTELE Simon</option>
                            <option value="VANDENBUSSCHE Timoth√©e">VANDENBUSSCHE Timoth√©e</option>
                            <option value="VARATAJAN Seron">VARATAJAN Seron</option>
                            <option value="VELOSO Enzo">VELOSO Enzo</option>
                            <option value="VOITIER Manoah">VOITIER Manoah</option>
                        </select>
                        </div>
                        
                        <!-- S√âLECTEUR DE SERVICE MISE √Ä JOUR avec les 3 nouveaux services -->
                        <div class="form-group">
                            <label>Service</label>
                            <select id="adminService">
                                <option value="">S√©lectionner un service</option>
                                <option value="porte-1">Porte 1</option>
                                <option value="porte-2">Porte 2</option>
                                <option value="presidence">Pr√©sidence</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label>Heure de d√©but</label>
                            <input type="time" 
                                   id="adminStartTime" 
                                   min="07:00" 
                                   max="23:00" 
                                   step="900">
                            <!-- step="900" = 15 minutes (900 secondes) -->
                            <small style="color: #666; font-size: 0.8rem;">
                                Format: HH:MM (ex: 09:15, 14:30)
                            </small>
                        </div>

                        <div class="form-group">
                            <label>Heure de fin</label>
                            <input type="time" 
                                   id="adminEndTime" 
                                   min="07:00" 
                                   max="23:59" 
                                   step="900">
                            <small style="color: #666; font-size: 0.8rem;">
                                La fin peut aller jusqu'√† 23:59
                            </small>
                        </div>
                        
                        <button class="btn btn-success" onclick="addAssignment()">‚ûï Ajouter l'affectation</button>
                    </div>
                    
                    <div class="current-assignments">
                        <h4>Affectations actuelles</h4>
                        <div id="assignmentsList">
                            <!-- Liste des affectations -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // ===========================================
        // CONFIGURATION ET VARIABLES GLOBALES
        // ===========================================
        
        const socket = io({
            reconnection: true,
            reconnectionDelay: 1000,
            reconnectionAttempts: 5,
            timeout: 20000
        });

        let planningData = {
            vendredi: [],
            samedi: [],
            dimanche: []
        };
        
        let currentDay = 'vendredi';
        let currentUser = 'all';
        let isAdmin = false;
        let isProduction = false;
        
        // COULEURS DES SERVICES MISE √Ä JOUR - Seulement les 3 nouveaux services
        const serviceColors = {
            'porte-1': '#3498db',    // Bleu
            'porte-2': '#2ecc71',    // Vert
            'presidence': '#9b59b6'  // Violet
        };
        
        // NOMS DES SERVICES MISE √Ä JOUR - Seulement les 3 nouveaux services
        const serviceNames = {
            'porte-1': 'Porte 1',
            'porte-2': 'Porte 2',
            'presidence': 'Pr√©sidence'
        };

        // ===========================================
        // FEEDBACK TACTILE
        // ===========================================
        
        function vibrate(pattern = [50]) {
            if ('vibrate' in navigator) {
                navigator.vibrate(pattern);
            }
        }

        // üÜï NOUVELLE FONCTION √Ä AJOUTER - Placer apr√®s les autres fonctions, avant les √©v√©nements socket
function syncDayDisplay(targetDay) {
    if (currentDay !== targetDay) {
        currentDay = targetDay;
        
        // Mettre √† jour les boutons d'onglets
        document.querySelectorAll('.day-btn').forEach(btn => {
            btn.classList.remove('active');
            if (btn.textContent.toLowerCase().trim() === targetDay.toLowerCase()) {
                btn.classList.add('active');
            }
        });
        
        // Mettre √† jour le s√©lecteur admin si la modale est ouverte
        const adminDaySelect = document.getElementById('adminDay');
        if (adminDaySelect && adminDaySelect.value !== targetDay) {
            adminDaySelect.value = targetDay;
        }
        
        updatePlanning();
        return true;
    }
    return false;
}

// üÜï NOUVELLES FONCTIONS √Ä AJOUTER apr√®s syncDayDisplay()

/**
 * Normalise un horaire au format HH:MM
 * G√®re les formats : "7:00", "07:00", "7h00", "7:30", etc.
 */
function normalizeTime(timeString) {
    if (!timeString) return '';
    
    // Nettoyer la cha√Æne et extraire heures/minutes
    const cleaned = timeString.replace(/[h\s]/g, ':').replace(/::+/g, ':');
    const parts = cleaned.split(':');
    
    let hours = parseInt(parts[0]) || 0;
    let minutes = parseInt(parts[1]) || 0;
    
    // Validation
    hours = Math.max(0, Math.min(23, hours));
    minutes = Math.max(0, Math.min(59, minutes));
    
    // Format HH:MM
    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
}

/**
 * Valide qu'un horaire est dans la plage autoris√©e (7h-23h59)
 */
function validateTimeRange(timeString) {
    const normalized = normalizeTime(timeString);
    const [hours, minutes] = normalized.split(':').map(Number);
    
    // Entre 7h00 et 23h59
    if (hours < 7 || hours > 23) {
        return { valid: false, error: `L'horaire doit √™tre entre 07:00 et 23:59` };
    }
    
    return { valid: true, time: normalized };
}

/**
 * V√©rifie qu'une p√©riode est coh√©rente (fin > d√©but)
 */
function validateTimePeriod(startTime, endTime) {
    const start = normalizeTime(startTime);
    const end = normalizeTime(endTime);
    
    const startValidation = validateTimeRange(start);
    const endValidation = validateTimeRange(end);
    
    if (!startValidation.valid) {
        return { valid: false, error: `Heure de d√©but: ${startValidation.error}` };
    }
    
    if (!endValidation.valid) {
        return { valid: false, error: `Heure de fin: ${endValidation.error}` };
    }
    
    // Convertir en minutes pour comparaison
    const [startHours, startMinutes] = start.split(':').map(Number);
    const [endHours, endMinutes] = end.split(':').map(Number);
    
    const startTotalMinutes = startHours * 60 + startMinutes;
    const endTotalMinutes = endHours * 60 + endMinutes;
    
    if (endTotalMinutes <= startTotalMinutes) {
        return { valid: false, error: 'L\'heure de fin doit √™tre apr√®s l\'heure de d√©but' };
    }
    
    // Dur√©e minimum de 15 minutes
    if (endTotalMinutes - startTotalMinutes < 15) {
        return { valid: false, error: 'La dur√©e minimum est de 15 minutes' };
    }
    
    return { 
        valid: true, 
        startTime: start, 
        endTime: end,
        durationMinutes: endTotalMinutes - startTotalMinutes
    };
}

        // ===========================================
        // GESTION DES CONNEXIONS SOCKET.IO
        // ===========================================
        
        socket.on('connect', () => {
            console.log('‚úÖ Connect√© au serveur');
            socket.emit('request_planning_data');
        });
        
        socket.on('planning_data', (data) => {
            console.log('üì• Donn√©es planning re√ßues', data);
            
            // G√©rer le nouveau format de donn√©es
            if (data.planning) {
                planningData = data.planning;
                isProduction = data.isProduction || false;
                
                // Afficher l'avertissement seulement si en production sans DB
                if (data.isProduction && !data.hasDatabase) {
                    document.getElementById('productionWarning').style.display = 'block';
                } else {
                    document.getElementById('productionWarning').style.display = 'none';
                }
            } else {
                // Format ancien (compatibilit√©)
                planningData = data;
            }
            
            updatePlanning();
        });
        
        socket.on('planning_updated', (data) => {
            console.log('üîÑ Planning mis √† jour', data);
            
            // G√©rer le nouveau format de donn√©es
            if (data.planning) {
                planningData = data.planning;
            } else {
                planningData = data;
            }
            
            updatePlanning();
            vibrate([50]);
        });
        
socket.on('assignment_added', (assignment) => {
    console.log('‚ûï Affectation ajout√©e', assignment);
    
    // üÜï Basculer vers le jour de l'affectation ajout√©e
    if (currentDay !== assignment.day) {
        currentDay = assignment.day;
        
        // Mettre √† jour les boutons d'onglets
        document.querySelectorAll('.day-btn').forEach(btn => {
            btn.classList.remove('active');
            if (btn.textContent.toLowerCase() === assignment.day) {
                btn.classList.add('active');
            }
        });
        
        updatePlanning();
        console.log(`üîÑ Basculement automatique vers: ${assignment.day}`);
    }
    
    vibrate([100]);
    if (isAdmin) {
        loadAssignments();
    }
});
        
        socket.on('assignment_deleted', (data) => {
            console.log('üóëÔ∏è Affectation supprim√©e', data);
            vibrate([50]);
            if (isAdmin) {
                loadAssignments();
            }
        });

        // ===========================================
        // FONCTIONS D'INTERFACE
        // ===========================================
        
        function selectDay(day) {
            currentDay = day;
            
            // Mise √† jour des boutons
            document.querySelectorAll('.day-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');
            
            updatePlanning();
            vibrate([30]);
        }
        
        function filterByUser() {
            currentUser = document.getElementById('userFilter').value;
            updatePlanning();
            vibrate([30]);
        }
        
function updatePlanning() {
    const grid = document.getElementById('planningGrid');
    grid.innerHTML = '';
    
    // üéØ DIMENSIONS FIXES ET CLAIRES
    const startHour = 7;
    const endHour = 17;
    const hoursCount = endHour - startHour + 1; // 17 heures
    const nameColumnWidth = 150; // pixels
    const hourColumnWidth = 60; // pixels par colonne d'heure
    const totalGridWidth = nameColumnWidth + (hoursCount * hourColumnWidth);
    
    console.log(`üìê Grille: ${nameColumnWidth}px (noms) + ${hoursCount} √ó ${hourColumnWidth}px = ${totalGridWidth}px total`);
    
    // CSS avec largeurs fixes
    const style = document.createElement('style');
    style.id = 'planning-grid-style';
    const oldStyle = document.getElementById('planning-grid-style');
    if (oldStyle) oldStyle.remove();
    
    style.textContent = `
        .planning-grid {
            display: block;
            min-width: ${totalGridWidth}px;
            width: ${totalGridWidth}px;
        }
        
        .planning-header-row,
        .planning-row {
            display: grid;
            grid-template-columns: ${nameColumnWidth}px repeat(${hoursCount}, ${hourColumnWidth}px);
            border-bottom: 1px solid #dee2e6;
            width: 100%;
        }
        
        .planning-header-row {
            position: sticky;
            top: 0;
            z-index: 100;
            background: white;
            border-bottom: 2px solid #007bff;
        }
        
        .planning-row {
            min-height: 70px;
            position: relative;
        }
    `;
    document.head.appendChild(style);
    
    // En-t√™te
    const headerDiv = document.createElement('div');
    headerDiv.className = 'planning-header-row';
    
    // Colonne des noms
    const nameHeader = document.createElement('div');
    nameHeader.style.cssText = `
        display: flex; 
        align-items: center; 
        justify-content: center; 
        padding: 12px; 
        font-weight: bold; 
        background: #007bff; 
        color: white;
        font-size: 0.9rem;
    `;
    nameHeader.textContent = 'Horaires';
    headerDiv.appendChild(nameHeader);
    
    // Colonnes horaires avec largeur fixe
    for (let h = startHour; h <= endHour; h++) {
        const hourDiv = document.createElement('div');
        hourDiv.style.cssText = `
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 12px 4px;
            font-weight: 600;
            font-size: 0.8rem;
            background: ${h % 2 === 0 ? '#f8f9fa' : '#e9ecef'};
            border-right: 1px solid #dee2e6;
            width: ${hourColumnWidth}px;
        `;
        hourDiv.textContent = `${h}h`;
        headerDiv.appendChild(hourDiv);
    }
    grid.appendChild(headerDiv);
    
    // Donn√©es
    const dayData = planningData[currentDay] || [];
    let users = currentUser === 'all' 
        ? ['ALLOWAKINOU Serge', 'AMBROISE Kevin', 'BAZARD Gwen', 'BEIGNEUX Hugo',
           'BILLIERE Cl√©ment', 'BOSI Lorenzo', 'BOUILLER Laurent', 'BOYER Fabien',
           'BREARD Fr√©d√©rique', 'COUCHY-ROMAIN Rony', 'DAMYS Geoffrey', 'DJANTA Leonard',
           'DJONFO Sylvio', 'DUCH√àNE Mathieu', 'FEBRISSY Jason', 'FORTUN√â Nicolas',
           'GILBERT Fabrice', 'JEAN Thierry', 'KHALED Jason', 'KONAN Josu√©',
           'KONAN Justin', 'KOULONI Yannick', 'KOUNI Espoir', 'LADAS Georges',
           'LADAS Killian', 'LALANDE Samuel', 'LE STANG Sylvain', 'LEJEUNE Rapha√´l',
           'LESAGE Adrien', 'LINA Thierry', 'LOHATOD√â Isaac', 'LUCE Franck',
           'MAPOLIN Gilbert', 'MATUSZAK Benjamin', 'MEDINA Mathieu', 'MEILLER Neal',
           'MESSUD Jeremie', 'MILLI√àRE Adriel', 'MIZ√àLE Sohann', 'MONDOLUS Olondieu',
           'MOUELLE Louis', 'NGOMA Maxence', 'NGOMA Vince', 'NSONGA Jonathan',
           'ONCOMODE Andrew', 'PAMBOU Loic', 'PINARD Johan', 'RABIN S√©bastien',
           'RABIN Timothy', 'RAINASOA Fitia', 'RAINASOA Naina', 'SON√â KELLE Axel',
           'TABET Jason', 'TIMOTH√âE Vanden', 'TOUROUDE John', 'VAN DE CASTELE Simon',
           'VANDENBUSSCHE Timoth√©e', 'VARATAJAN Seron', 'VELOSO Enzo', 'VOITIER Manoah']
        : [currentUser];
    
    // üéØ FONCTION DE CALCUL EN PIXELS ABSOLUS
    function calculatePixelPosition(startTime, endTime) {
        const [startHours, startMins = 0] = startTime.split(':').map(Number);
        const [endHours, endMins = 0] = endTime.split(':').map(Number);
        
        // V√©rification de plage
        if (startHours < startHour || endHours > endHour) {
            console.warn(`‚ö†Ô∏è Heure hors plage: ${startTime}-${endTime}`);
            return null;
        }
        
        // üéØ CALCUL DIRECT EN PIXELS
        // Position de d√©part = largeur colonne nom + d√©calage horaire en pixels
        const hoursSinceStart = startHours - startHour; // ex: 7h15 ‚Üí 0.25h depuis 7h
        const minutesFraction = startMins / 60; // ex: 15min ‚Üí 0.25
        const totalHourOffset = hoursSinceStart + minutesFraction; // ex: 0.25h
        
        const leftPixels = nameColumnWidth + (totalHourOffset * hourColumnWidth);
        
        // Largeur = dur√©e en heures √ó largeur d'une colonne d'heure
        const startTotalMinutes = startHours * 60 + startMins;
        const endTotalMinutes = endHours * 60 + endMins;
        const durationMinutes = endTotalMinutes - startTotalMinutes;
        const durationHours = durationMinutes / 60;
        
        const widthPixels = durationHours * hourColumnWidth;
        
        return {
            leftPixels: Math.round(leftPixels),
            widthPixels: Math.round(widthPixels),
            durationMinutes: durationMinutes,
            debug: {
                startTime,
                endTime,
                hoursSinceStart,
                minutesFraction,
                totalHourOffset,
                durationHours
            }
        };
    }
    
    // Cr√©er les lignes utilisateur
    users.forEach(user => {
        const userAssignments = dayData.filter(a => a.user === user);
        
        const rowDiv = document.createElement('div');
        rowDiv.className = 'planning-row';
        
        // Nom utilisateur
        const userDiv = document.createElement('div');
        userDiv.style.cssText = `
            display: flex;
            align-items: center;
            padding: 16px;
            font-weight: 600;
            background: #f8f9fa;
            border-right: 1px solid #dee2e6;
            font-size: 0.9rem;
            width: ${nameColumnWidth}px;
        `;
        userDiv.textContent = user;
        rowDiv.appendChild(userDiv);
        
        // Cellules horaires (visuelles)
        for (let h = startHour; h <= endHour; h++) {
            const hourCell = document.createElement('div');
            hourCell.style.cssText = `
                background: ${h % 2 === 0 ? 'white' : '#fafafa'};
                border-right: 1px solid #f0f0f0;
                width: ${hourColumnWidth}px;
            `;
            rowDiv.appendChild(hourCell);
        }
        
        // üéØ T√ÇCHES AVEC POSITIONNEMENT PIXEL-PERFECT
        userAssignments.forEach(assignment => {
            const pos = calculatePixelPosition(assignment.startTime, assignment.endTime);
            
            if (!pos) {
                console.error(`‚ùå Position impossible pour: ${assignment.startTime}-${assignment.endTime}`);
                return;
            }
            
            const taskDiv = document.createElement('div');
            taskDiv.className = 'task-pixel-perfect';
            
            // üéØ POSITIONNEMENT EN PIXELS ABSOLUS
            taskDiv.style.cssText = `
                position: absolute;
                top: 4px;
                bottom: 4px;
                left: ${pos.leftPixels}px;
                width: ${pos.widthPixels}px;
                background-color: ${serviceColors[assignment.service]};
                color: white;
                border-radius: 6px;
                padding: 6px 10px;
                font-size: 0.8rem;
                display: flex;
                flex-direction: column;
                justify-content: center;
                z-index: 10;
                box-shadow: 0 2px 4px rgba(0,0,0,0.2);
                cursor: pointer;
                border: 1px solid rgba(255,255,255,0.2);
                transition: all 0.2s ease;
                min-width: 40px;
            `;
            
            // Contenu adaptatif
            const duration = pos.durationMinutes;
            const isShort = duration < 60;
            const isVeryShort = duration < 30;
            
            if (isVeryShort) {
                taskDiv.innerHTML = `
                    <div style="font-size: 0.65rem; font-weight: 600; text-align: center; line-height: 1.1;">
                        ${serviceNames[assignment.service].substring(0, 6)}...
                    </div>
                    <div style="font-size: 0.55rem; text-align: center; opacity: 0.9;">
                        ${assignment.startTime.substring(0, 5)}
                    </div>
                `;
                taskDiv.style.padding = '4px 6px';
            } else {
                taskDiv.innerHTML = `
                    <div style="font-weight: 600; margin-bottom: 2px; font-size: ${isShort ? '0.7rem' : '0.75rem'}; line-height: 1.1;">
                        ${isShort ? serviceNames[assignment.service].split(' ')[0] : serviceNames[assignment.service]}
                    </div>
                    <div style="font-size: ${isShort ? '0.6rem' : '0.65rem'}; opacity: 0.9; line-height: 1;">
                        ${assignment.startTime} - ${assignment.endTime}
                    </div>
                `;
            }
            
            // Hover effect
            taskDiv.addEventListener('mouseenter', () => {
                taskDiv.style.transform = 'translateY(-1px)';
                taskDiv.style.boxShadow = '0 4px 12px rgba(0,0,0,0.3)';
                taskDiv.style.zIndex = '20';
            });
            
            taskDiv.addEventListener('mouseleave', () => {
                taskDiv.style.transform = 'translateY(0)';
                taskDiv.style.boxShadow = '0 2px 4px rgba(0,0,0,0.2)';
                taskDiv.style.zIndex = '10';
            });
            
            rowDiv.appendChild(taskDiv);
            
            console.log(`üìç ${assignment.startTime}-${assignment.endTime} ‚Üí ${pos.leftPixels}px (left), ${pos.widthPixels}px (width) | Debug:`, pos.debug);
        });
        
        grid.appendChild(rowDiv);
    });
    
    console.log(`‚úÖ Planning pixel-perfect: ${totalGridWidth}px de large`);
}
        // ===========================================
        // FONCTIONS ADMIN
        // ===========================================
        
        function openAdminModal() {
            document.getElementById('adminModalOverlay').style.display = 'flex';
            vibrate([50]);
        }
        
        function closeAdminModal() {
            document.getElementById('adminModalOverlay').style.display = 'none';
            document.getElementById('adminPassword').value = '';
            vibrate([30]);
        }
        
        function adminLogin() {
            const password = document.getElementById('adminPassword').value;
            
            if (password === 'admin123') { // Mot de passe simple pour la d√©mo
                isAdmin = true;
                document.getElementById('adminLogin').style.display = 'none';
                document.getElementById('adminInterface').style.display = 'block';
                loadAssignments();
                vibrate([100]);
            } else {
                alert('Mot de passe incorrect');
                vibrate([200, 100, 200]);
            }
        }
        
function addAssignment() {
    const day = document.getElementById('adminDay').value;
    const user = document.getElementById('adminUser').value;
    const service = document.getElementById('adminService').value;
    const rawStartTime = document.getElementById('adminStartTime').value;
    const rawEndTime = document.getElementById('adminEndTime').value;
    
    // üÜï VALIDATION DE BASE
    if (!user || !service || !rawStartTime || !rawEndTime) {
        alert('Veuillez remplir tous les champs');
        vibrate([200, 100, 200]);
        return;
    }
    
    // üÜï VALIDATION ET NORMALISATION DES HORAIRES
    const timeValidation = validateTimePeriod(rawStartTime, rawEndTime);
    if (!timeValidation.valid) {
        alert(`Erreur d'horaire: ${timeValidation.error}`);
        vibrate([200, 100, 200]);
        return;
    }
    
    const startTime = timeValidation.startTime;
    const endTime = timeValidation.endTime;
    const duration = timeValidation.durationMinutes;
    
    console.log(`‚úÖ Horaires valid√©s: ${startTime} - ${endTime} (${duration} min)`);
    
    // üÜï V√âRIFICATION DES CONFLITS AM√âLIOR√âE
    const dayAssignments = planningData[day] || [];
    const hasConflict = dayAssignments.some(existing => {
        if (existing.user !== user) return false;
        
        // Convertir en minutes pour comparaison pr√©cise
        const toMinutes = (time) => {
            const [h, m] = normalizeTime(time).split(':').map(Number);
            return h * 60 + m;
        };
        
        const newStart = toMinutes(startTime);
        const newEnd = toMinutes(endTime);
        const existingStart = toMinutes(existing.startTime);
        const existingEnd = toMinutes(existing.endTime);
        
        // V√©rifier le chevauchement avec une marge de s√©curit√©
        const overlap = (newStart < existingEnd) && (newEnd > existingStart);
        
        if (overlap) {
            console.warn(`Conflit d√©tect√© avec: ${existing.startTime}-${existing.endTime}`);
        }
        
        return overlap;
    });
    
    if (hasConflict) {
        alert(`Conflit d'horaire: ${user} est d√©j√† affect√©(e) sur une p√©riode qui chevauche avec ${startTime}-${endTime}`);
        vibrate([200, 100, 200]);
        return;
    }
    
    // üÜï CR√âATION DE L'AFFECTATION AVEC HORAIRES NORMALIS√âS
    const assignment = {
        day,
        user,
        service,
        startTime, // Horaire normalis√©
        endTime,   // Horaire normalis√©
        duration   // Dur√©e en minutes (pour info)
    };
    
    console.log(`üì§ Envoi de l'affectation:`, assignment);
    socket.emit('add_assignment', assignment);
    
    // Basculer automatiquement vers l'onglet du jour ajout√©
    if (currentDay !== day) {
        currentDay = day;
        
        document.querySelectorAll('.day-btn').forEach(btn => {
            btn.classList.remove('active');
            if (btn.textContent.toLowerCase() === day) {
                btn.classList.add('active');
            }
        });
        
        updatePlanning();
        console.log(`üîÑ Basculement automatique vers l'onglet: ${day}`);
    }
    
    // Reset du formulaire
    document.getElementById('adminUser').value = '';
    document.getElementById('adminService').value = '';
    document.getElementById('adminStartTime').value = '';
    document.getElementById('adminEndTime').value = '';
    
    vibrate([100]);
    
    // üÜï FEEDBACK VISUEL DE SUCC√àS
    const successMessage = `‚úÖ T√¢che ajout√©e: ${user} - ${serviceNames[service]} (${startTime}-${endTime})`;
    console.log(successMessage);
}
        
        function deleteAssignment(assignmentId) {
            if (confirm('Supprimer cette affectation ?')) {
                socket.emit('delete_assignment', { id: assignmentId });
                vibrate([100]);
            }
        }
        
        function loadAssignments() {
            const list = document.getElementById('assignmentsList');
            list.innerHTML = '';
            
            Object.entries(planningData).forEach(([day, assignments]) => {
                if (assignments.length > 0) {
                    const dayHeader = document.createElement('h5');
                    dayHeader.textContent = day.charAt(0).toUpperCase() + day.slice(1);
                    dayHeader.style.marginTop = '16px';
                    list.appendChild(dayHeader);
                    
                    assignments.forEach(assignment => {
                        const item = document.createElement('div');
                        item.className = 'assignment-item';
                        item.innerHTML = `
                            <div class="assignment-info">
                                <strong>${assignment.user}</strong> - 
                                ${serviceNames[assignment.service]} 
                                (${assignment.startTime} - ${assignment.endTime})
                            </div>
                            <button class="btn btn-danger btn-small" onclick="deleteAssignment('${assignment.id}')">
                                üóëÔ∏è
                            </button>
                        `;
                        list.appendChild(item);
                    });
                }
            });
        }

        // ===========================================
        // INITIALISATION
        // ===========================================
        
        document.addEventListener('DOMContentLoaded', () => {
            console.log('üöÄ Application Planning initialis√©e avec les nouveaux services');
            console.log('üéØ Services disponibles:', Object.keys(serviceNames));
            
            // Demander les donn√©es au serveur
            if (socket.connected) {
                socket.emit('request_planning_data');
            }
            
            // Ajouter le feedback tactile
            document.querySelectorAll('.btn, .day-btn').forEach(element => {
                element.addEventListener('touchstart', () => {
                    vibrate([30]);
                }, { passive: true });
            });

                // üÜï AJOUTER CES LIGNES √Ä LA FIN :
    // Ajout d'une animation CSS pour le feedback visuel
    const style = document.createElement('style');
    style.textContent = `
        @keyframes highlight {
            0% { 
                box-shadow: 0 0 0 0 rgba(52, 152, 219, 0.8);
                transform: scale(1);
            }
            50% { 
                box-shadow: 0 0 0 10px rgba(52, 152, 219, 0.2);
                transform: scale(1.02);
            }
            100% { 
                box-shadow: 0 0 0 0 rgba(52, 152, 219, 0);
                transform: scale(1);
            }
        }
    `;
    document.head.appendChild(style);
        });
        
        // Emp√™cher le zoom sur double-tap
        let lastTouchEnd = 0;
        document.addEventListener('touchend', function (event) {
            const now = (new Date()).getTime();
            if (now - lastTouchEnd <= 300) {
                event.preventDefault();
            }
            lastTouchEnd = now;
        }, false);
    </script>
</body>
</html>