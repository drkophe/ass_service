<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Gestion des Places - Demandes</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.5/socket.io.js"></script>
    <link rel="stylesheet" href="styles.css">
</head>
<body id="body-index">
    <nav>
        <div class="navigation">
                <a href="/" class="nav-link active">Demandes</a>
                <a href="/salle" class="nav-link">Salle</a>
                <a href="/planning" class="nav-link">Planning</a>
        </div>
    </nav>
    <div class="container">

        <div class="main-content">
            <!-- Section pour g√©rer les demandes -->
            <div class="section management-section">
                <h2 class="section-title">
                    Demandes en cours
                    <span id="authStatus" class="auth-status">üîí Lecture seule</span>
                </h2>
                <p id="available-places-resume"><span id="totalAvailable">1509</span> places disponibles</p>
                
                <div class="filters">
                    <select id="statusFilter" onchange="filterRequests()">
                        <option value="all">Tous les statuts</option>
                        <option value="pending">En attente</option>
                        <option value="in-progress">En cours</option>
                        <option value="available">Attribu√©</option>
                        <option value="available-separated">Attribu√© (s√©par√©)</option>
                    </select>
                </div>
                
                <div class="requests-list" id="requestsList">
                    <div class="empty-state">
                        <p>üì≠ Aucune demande en cours...</p>
                        <p>Les nouvelles demandes appara√Ætront ici automatiquement</p>
                    </div>
                </div>
            </div>
            
            <!-- Section pour faire une demande de place -->
            <div class="section request-section">

                <form id="requestForm" class="request-form">
                    <div class="form-group">
                        <label for="userName">Votre nom</label>
                        <select id="userName" required>
                            <option value="">S√©lectionnez votre nom</option>
                            <option value="ALLOWAKINOU Serge">ALLOWAKINOU Serge</option>
                            <option value="AMBROISE Kevin">AMBROISE Kevin</option>
                            <option value="BAZARD Gwen">BAZARD Gwen</option>
                            <option value="BEIGNEUX Hugo">BEIGNEUX Hugo</option>
                            <option value="BILLIERE Cl√©ment">BILLIERE Cl√©ment</option>
                            <option value="BOSI Lorenzo">BOSI Lorenzo</option>
                            <option value="BOUILLER Laurent">BOUILLER Laurent</option>
                            <option value="BOYER Fabien">BOYER Fabien</option>
                            <option value="BREARD Fr√©d√©rique">BREARD Fr√©d√©rique</option>
                            <option value="COUCHY-ROMAIN Rony">COUCHY-ROMAIN Rony</option>
                            <option value="DAMYS Geoffrey">DAMYS Geoffrey</option>
                            <option value="DJANTA Leonard">DJANTA Leonard</option>
                            <option value="DJONFO Sylvio">DJONFO Sylvio</option>
                            <option value="DUCH√àNE Mathieu">DUCH√àNE Mathieu</option>
                            <option value="FEBRISSY Jason">FEBRISSY Jason</option>
                            <option value="FORTUN√â Nicolas">FORTUN√â Nicolas</option>
                            <option value="GILBERT Fabrice">GILBERT Fabrice</option>
                            <option value="JEAN Thierry">JEAN Thierry</option>
                            <option value="KHALED Jason">KHALED Jason</option>
                            <option value="KONAN Josu√©">KONAN Josu√©</option>
                            <option value="KONAN Justin">KONAN Justin</option>
                            <option value="KOULONI Yannick">KOULONI Yannick</option>
                            <option value="KOUNI Espoir">KOUNI Espoir</option>
                            <option value="LADAS Georges">LADAS Georges</option>
                            <option value="LADAS Killian">LADAS Killian</option>
                            <option value="LALANDE Samuel">LALANDE Samuel</option>
                            <option value="LE STANG Sylvain">LE STANG Sylvain</option>
                            <option value="LEJEUNE Rapha√´l">LEJEUNE Rapha√´l</option>
                            <option value="LESAGE Adrien">LESAGE Adrien</option>
                            <option value="LINA Thierry">LINA Thierry</option>
                            <option value="LOHATOD√â Isaac">LOHATOD√â Isaac</option>
                            <option value="LUCE Franck">LUCE Franck</option>
                            <option value="MAPOLIN Gilbert">MAPOLIN Gilbert</option>
                            <option value="MATUSZAK Benjamin">MATUSZAK Benjamin</option>
                            <option value="MEDINA Mathieu">MEDINA Mathieu</option>
                            <option value="MEILLER Neal">MEILLER Neal</option>
                            <option value="MESSUD Jeremie">MESSUD Jeremie</option>
                            <option value="MILLI√àRE Adriel">MILLI√àRE Adriel</option>
                            <option value="MIZ√àLE Sohann">MIZ√àLE Sohann</option>
                            <option value="MONDOLUS Olondieu">MONDOLUS Olondieu</option>
                            <option value="MOUELLE Louis">MOUELLE Louis</option>
                            <option value="NGOMA Maxence">NGOMA Maxence</option>
                            <option value="NGOMA Vince">NGOMA Vince</option>
                            <option value="NSONGA Jonathan">NSONGA Jonathan</option>
                            <option value="ONCOMODE Andrew">ONCOMODE Andrew</option>
                            <option value="PAMBOU Loic">PAMBOU Loic</option>
                            <option value="PINARD Johan">PINARD Johan</option>
                            <option value="RABIN S√©bastien">RABIN S√©bastien</option>
                            <option value="RABIN Timothy">RABIN Timothy</option>
                            <option value="RAINASOA Fitia">RAINASOA Fitia</option>
                            <option value="RAINASOA Naina">RAINASOA Naina</option>
                            <option value="SON√â KELLE Axel">SON√â KELLE Axel</option>
                            <option value="TABET Jason">TABET Jason</option>
                            <option value="TIMOTH√âE Vanden">TIMOTH√âE Vanden</option>
                            <option value="TOUROUDE John">TOUROUDE John</option>
                            <option value="VAN DE CASTELE Simon">VAN DE CASTELE Simon</option>
                            <option value="VANDENBUSSCHE Timoth√©e">VANDENBUSSCHE Timoth√©e</option>
                            <option value="VARATAJAN Seron">VARATAJAN Seron</option>
                            <option value="VELOSO Enzo">VELOSO Enzo</option>
                            <option value="VOITIER Manoah">VOITIER Manoah</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="placesNeeded">Nombre de places n√©cessaires</label>
                        <input type="number" id="placesNeeded" min="1" max="20" required placeholder="Ex: 4">
                    </div>

                    <div class="form-group">
                        <label for="comment">Commentaire (optionnel)</label>
                        <textarea id="comment" placeholder="Informations suppl√©mentaires..." rows="2"></textarea>
                    </div>

                    <button type="submit" class="btn btn-primary" id="submitBtn">
                        + Cr√©er la demande
                    </button>
                    
                    <button type="button" class="btn btn-secondary" id="authBtn" onclick="openAuthModal()" style="display: none;">
                        üîê Se connecter pour agir
                    </button>
                </form>
            </div>

        </div>
    </div>

    <!-- Modal d'authentification -->
    <div class="modal-overlay" id="authModalOverlay" onclick="closeAuthModal()">
        <div class="modal" onclick="event.stopPropagation()">
            <div class="modal-header">
                <h3>üîê Authentification requise</h3>
                <button class="btn-close" onclick="closeAuthModal()">‚úñ</button>
            </div>
            <div class="modal-body">
                <p>Pour cr√©er ou traiter des demandes, veuillez vous authentifier :</p>
                <div class="form-group">
                    <label for="authPassword">Mot de passe</label>
                    <input type="password" id="authPassword" placeholder="Entrez le mot de passe" maxlength="10">
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" onclick="authenticate()">Se connecter</button>
            </div>
        </div>
    </div>

    <!-- Modale pour traiter une demande -->
    <div class="modal-overlay" id="zoneModalOverlay" onclick="closeZoneModal()">
        <div class="modal" onclick="event.stopPropagation()">
            <div class="modal-header">
                <h3 id="modalTitle">üéØ Traiter la demande</h3>
                <button class="btn-close" onclick="closeZoneModal()">‚úñ</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="handlerName">Votre nom *</label>
                    <select id="handlerName" required>
                        <option value="">Qui traite cette demande ?</option>
                        <option value="ALLOWAKINOU Serge">ALLOWAKINOU Serge</option>
                        <option value="AMBROISE Kevin">AMBROISE Kevin</option>
                        <option value="BAZARD Gwen">BAZARD Gwen</option>
                        <option value="BEIGNEUX Hugo">BEIGNEUX Hugo</option>
                        <option value="BILLIERE Cl√©ment">BILLIERE Cl√©ment</option>
                        <option value="BOSI Lorenzo">BOSI Lorenzo</option>
                        <option value="BOUILLER Laurent">BOUILLER Laurent</option>
                        <option value="BOYER Fabien">BOYER Fabien</option>
                        <option value="BREARD Fr√©d√©rique">BREARD Fr√©d√©rique</option>
                        <option value="COUCHY-ROMAIN Rony">COUCHY-ROMAIN Rony</option>
                        <option value="DAMYS Geoffrey">DAMYS Geoffrey</option>
                        <option value="DJANTA Leonard">DJANTA Leonard</option>
                        <option value="DJONFO Sylvio">DJONFO Sylvio</option>
                        <option value="DUCH√àNE Mathieu">DUCH√àNE Mathieu</option>
                        <option value="FEBRISSY Jason">FEBRISSY Jason</option>
                        <option value="FORTUN√â Nicolas">FORTUN√â Nicolas</option>
                        <option value="GILBERT Fabrice">GILBERT Fabrice</option>
                        <option value="JEAN Thierry">JEAN Thierry</option>
                        <option value="KHALED Jason">KHALED Jason</option>
                        <option value="KONAN Josu√©">KONAN Josu√©</option>
                        <option value="KONAN Justin">KONAN Justin</option>
                        <option value="KOULONI Yannick">KOULONI Yannick</option>
                        <option value="KOUNI Espoir">KOUNI Espoir</option>
                        <option value="LADAS Georges">LADAS Georges</option>
                        <option value="LADAS Killian">LADAS Killian</option>
                        <option value="LALANDE Samuel">LALANDE Samuel</option>
                        <option value="LE STANG Sylvain">LE STANG Sylvain</option>
                        <option value="LEJEUNE Rapha√´l">LEJEUNE Rapha√´l</option>
                        <option value="LESAGE Adrien">LESAGE Adrien</option>
                        <option value="LINA Thierry">LINA Thierry</option>
                        <option value="LOHATOD√â Isaac">LOHATOD√â Isaac</option>
                        <option value="LUCE Franck">LUCE Franck</option>
                        <option value="MAPOLIN Gilbert">MAPOLIN Gilbert</option>
                        <option value="MATUSZAK Benjamin">MATUSZAK Benjamin</option>
                        <option value="MEDINA Mathieu">MEDINA Mathieu</option>
                        <option value="MEILLER Neal">MEILLER Neal</option>
                        <option value="MESSUD Jeremie">MESSUD Jeremie</option>
                        <option value="MILLI√àRE Adriel">MILLI√àRE Adriel</option>
                        <option value="MIZ√àLE Sohann">MIZ√àLE Sohann</option>
                        <option value="MONDOLUS Olondieu">MONDOLUS Olondieu</option>
                        <option value="MOUELLE Louis">MOUELLE Louis</option>
                        <option value="NGOMA Maxence">NGOMA Maxence</option>
                        <option value="NGOMA Vince">NGOMA Vince</option>
                        <option value="NSONGA Jonathan">NSONGA Jonathan</option>
                        <option value="ONCOMODE Andrew">ONCOMODE Andrew</option>
                        <option value="PAMBOU Loic">PAMBOU Loic</option>
                        <option value="PINARD Johan">PINARD Johan</option>
                        <option value="RABIN S√©bastien">RABIN S√©bastien</option>
                        <option value="RABIN Timothy">RABIN Timothy</option>
                        <option value="RAINASOA Fitia">RAINASOA Fitia</option>
                        <option value="RAINASOA Naina">RAINASOA Naina</option>
                        <option value="SON√â KELLE Axel">SON√â KELLE Axel</option>
                        <option value="TABET Jason">TABET Jason</option>
                        <option value="TIMOTH√âE Vanden">TIMOTH√âE Vanden</option>
                        <option value="TOUROUDE John">TOUROUDE John</option>
                        <option value="VAN DE CASTELE Simon">VAN DE CASTELE Simon</option>
                        <option value="VANDENBUSSCHE Timoth√©e">VANDENBUSSCHE Timoth√©e</option>
                        <option value="VARATAJAN Seron">VARATAJAN Seron</option>
                        <option value="VELOSO Enzo">VELOSO Enzo</option>
                        <option value="VOITIER Manoah">VOITIER Manoah</option>
                    </select>
                </div>
                
                <!-- Choix du type de traitement (visible lors de la prise en charge) -->
                <div id="treatmentChoice" style="display: none;">
                    <p><strong>Comment traiter cette demande ?</strong></p>
                    <div class="treatment-selection">
                        <div class="treatment-option">
                            <input type="radio" name="selectedTreatment" value="available" 
                                   id="treatment-normal" onchange="onTreatmentSelected()">
                            <label for="treatment-normal">
                                <strong>‚úÖ Places normales (ensemble)</strong>
                                <small>Les personnes seront assises c√¥te √† c√¥te</small>
                            </label>
                        </div>
                        <div class="treatment-option">
                            <input type="radio" name="selectedTreatment" value="available-separated" 
                                   id="treatment-separated" onchange="onTreatmentSelected()">
                            <label for="treatment-separated">
                                <strong>‚ö†Ô∏è Places s√©par√©es (pas c√¥te √† c√¥te)</strong>
                                <small>Les personnes ne seront pas assises ensemble</small>
                            </label>
                        </div>
                    </div>
                </div>
                
                <!-- S√©lection de zone (visible apr√®s choix du traitement) -->
                <div id="zoneChoice" style="display: none;">
                    <p>S√©lectionnez la zone pour cette demande :</p>
                    <div class="zone-selection" id="zoneSelection">
                        <!-- Les zones disponibles seront ajout√©es dynamiquement -->
                    </div>
                </div>
                
                <div class="modal-info">
                    <strong>Demande :</strong> <span id="modalRequestInfo"></span>
                </div>
                
                <div class="status-info" id="statusInfo">
                    <!-- Informations sur le type d'attribution -->
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="goBackToTreatmentChoice()" id="backBtn" style="display: none;">
                    ‚Üê Retour
                </button>
                <button class="btn btn-success" onclick="confirmZoneAssignment()" id="confirmZoneBtn" disabled>
                    ‚úÖ Confirmer
                </button>
            </div>
        </div>
    </div>

    <script>
        /**
         * üéØ APPLICATION DE GESTION DES DEMANDES
         * Version optimis√©e mobile sans notifications + authentification
         */

        // ===========================================
        // CONFIGURATION ET VARIABLES GLOBALES
        // ===========================================

        const socket = io({
            reconnection: true,
            reconnectionDelay: 1000,
            reconnectionAttempts: 5,
            timeout: 20000
        });

        let currentRequests = new Map();
        let zones = {};
        let connectedUsers = 0;
        let currentRequestForZone = null;
        let isAuthenticated = false; // Variable d'authentification

        // ===========================================
        // GESTION DE L'AUTHENTIFICATION
        // ===========================================

        function checkAuthStatus() {
            try {
                // En mode d√©veloppement/test, toujours commencer d√©connect√© pour forcer l'authentification
                if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
                    console.log('üîß Mode d√©veloppement : authentification requise √† chaque session');
                    isAuthenticated = false;
                    updateAuthUI();
                    return;
                }
                
                // En production, v√©rifier le localStorage
                const authStatus = localStorage.getItem('gestion_places_auth');
                const authTimestamp = localStorage.getItem('gestion_places_auth_timestamp');
                
                // Expirer l'authentification apr√®s 24h
                if (authTimestamp) {
                    const now = new Date().getTime();
                    const authTime = parseInt(authTimestamp);
                    const hoursSinceAuth = (now - authTime) / (1000 * 60 * 60);
                    
                    if (hoursSinceAuth > 24) {
                        console.log('üïê Authentification expir√©e (24h)');
                        clearAuthStatus();
                        isAuthenticated = false;
                        updateAuthUI();
                        return;
                    }
                }
                
                isAuthenticated = authStatus === 'true' && authTimestamp;
                updateAuthUI();
                console.log('üîê Statut auth r√©cup√©r√©:', isAuthenticated);
            } catch (e) {
                console.warn('Impossible de r√©cup√©rer le statut auth:', e);
                isAuthenticated = false;
                updateAuthUI();
            }
        }

        function saveAuthStatus() {
            try {
                localStorage.setItem('gestion_places_auth', 'true');
                localStorage.setItem('gestion_places_auth_timestamp', new Date().getTime().toString());
                console.log('üîê Statut auth sauvegard√© avec timestamp');
            } catch (e) {
                console.warn('Impossible de sauvegarder le statut auth:', e);
            }
        }

        function clearAuthStatus() {
            try {
                localStorage.removeItem('gestion_places_auth');
                localStorage.removeItem('gestion_places_auth_timestamp');
                console.log('üîê Statut auth effac√©');
            } catch (e) {
                console.warn('Impossible d\'effacer le statut auth:', e);
            }
        }

        function updateAuthUI() {
            const authStatus = document.getElementById('authStatus');
            const submitBtn = document.getElementById('submitBtn');
            const authBtn = document.getElementById('authBtn');
            const requestForm = document.getElementById('requestForm');
            
            if (isAuthenticated) {
                authStatus.innerHTML = 'üîì Mode interaction <button onclick="logout()" style="margin-left: 8px; padding: 4px 8px; font-size: 0.7rem; background: #dc3545; color: white; border: none; border-radius: 4px; cursor: pointer;">D√©connexion</button>';
                authStatus.className = 'auth-status authenticated';
                submitBtn.style.display = 'block';
                authBtn.style.display = 'none';
                
                // Activer le formulaire
                const formElements = requestForm.querySelectorAll('input, select, textarea, button');
                formElements.forEach(el => el.disabled = false);
            } else {
                authStatus.textContent = 'üîí Lecture seule - Authentification requise';
                authStatus.className = 'auth-status';
                submitBtn.style.display = 'none';
                authBtn.style.display = 'block';
                
                // D√©sactiver le formulaire
                const formElements = requestForm.querySelectorAll('input, select, textarea');
                formElements.forEach(el => el.disabled = true);
            }
        }

        function logout() {
            isAuthenticated = false;
            clearAuthStatus();
            updateAuthUI();
            console.log('üîí D√©connexion effectu√©e');
            vibrate([100, 50]); // Feedback de d√©connexion
            
            // Message de confirmation
            const authStatus = document.getElementById('authStatus');
            const originalText = authStatus.textContent;
            authStatus.textContent = 'üîí D√©connect√© avec succ√®s';
            authStatus.style.color = '#28a745';
            setTimeout(() => {
                authStatus.textContent = originalText;
                authStatus.style.color = '';
            }, 2000);
        }

        function openAuthModal() {
            document.getElementById('authModalOverlay').style.display = 'flex';
            document.getElementById('authPassword').focus();
            vibrate([50]);
        }

        function closeAuthModal() {
            document.getElementById('authModalOverlay').style.display = 'none';
            document.getElementById('authPassword').value = '';
            vibrate([30]);
        }

        function authenticate() {
            const password = document.getElementById('authPassword').value;
            
            if (password === '2025') {
                isAuthenticated = true;
                saveAuthStatus();
                updateAuthUI();
                closeAuthModal();
                console.log('üîì Authentification r√©ussie');
                vibrate([100, 50, 100]); // Vibration de succ√®s
                
                // Message de succ√®s visuel
                const input = document.getElementById('authPassword');
                input.style.borderColor = '#28a745';
                input.style.backgroundColor = '#d4edda';
                setTimeout(() => {
                    input.style.borderColor = '';
                    input.style.backgroundColor = '';
                    input.value = '';
                }, 500);
            } else {
                console.log('‚ùå Authentification √©chou√©e');
                vibrate([200, 100, 200]); // Vibration d'erreur
                
                // Animation d'erreur sur le champ
                const input = document.getElementById('authPassword');
                input.style.borderColor = '#dc3545';
                input.style.backgroundColor = '#fff5f5';
                
                // Afficher un message d'erreur
                let errorMsg = document.getElementById('authErrorMsg');
                if (!errorMsg) {
                    errorMsg = document.createElement('div');
                    errorMsg.id = 'authErrorMsg';
                    errorMsg.style.color = '#dc3545';
                    errorMsg.style.fontSize = '0.85rem';
                    errorMsg.style.marginTop = '8px';
                    errorMsg.style.textAlign = 'center';
                    input.parentNode.appendChild(errorMsg);
                }
                errorMsg.textContent = '‚ùå Code incorrect. Essayez encore.';
                
                setTimeout(() => {
                    input.style.borderColor = '';
                    input.style.backgroundColor = '';
                    input.value = '';
                    input.focus();
                    if (errorMsg) errorMsg.textContent = '';
                }, 2000);
            }
        }

        // ===========================================
        // GESTION DE LA M√âMOIRE UTILISATEUR
        // ===========================================

        // Fonctions pour sauvegarder/r√©cup√©rer les noms
        function saveCreatorName(name) {
            try {
                if (name && name.trim()) {
                    localStorage.setItem('gestion_places_creator_name', name.trim());
                    console.log('üíæ Nom cr√©ateur sauvegard√©:', name);
                }
            } catch (e) {
                console.warn('Impossible de sauvegarder le nom cr√©ateur:', e);
            }
        }

        function saveHandlerName(name) {
            try {
                if (name && name.trim()) {
                    localStorage.setItem('gestion_places_handler_name', name.trim());
                    console.log('üíæ Nom gestionnaire sauvegard√©:', name);
                }
            } catch (e) {
                console.warn('Impossible de sauvegarder le nom gestionnaire:', e);
            }
        }

        function getCreatorName() {
            try {
                return localStorage.getItem('gestion_places_creator_name') || '';
            } catch (e) {
                console.warn('Impossible de r√©cup√©rer le nom cr√©ateur:', e);
                return '';
            }
        }

        function getHandlerName() {
            try {
                return localStorage.getItem('gestion_places_handler_name') || '';
            } catch (e) {
                console.warn('Impossible de r√©cup√©rer le nom gestionnaire:', e);
                return '';
            }
        }

        // Restaurer les noms sauvegard√©s
        function restoreUserNames() {
            const savedCreatorName = getCreatorName();
            
            if (savedCreatorName) {
                document.getElementById('userName').value = savedCreatorName;
                console.log('üîÑ Nom cr√©ateur restaur√©:', savedCreatorName);
            }
        }

        // Restaurer le nom du gestionnaire dans la modale
        function restoreHandlerName() {
            const savedHandlerName = getHandlerName();
            
            if (savedHandlerName) {
                document.getElementById('handlerName').value = savedHandlerName;
                console.log('üîÑ Nom gestionnaire restaur√©:', savedHandlerName);
                updateConfirmButtonState(); // Mettre √† jour l'√©tat du bouton
            }
        }

        // ===========================================
        // FEEDBACK TACTILE (pour mobile)
        // ===========================================
        
        function vibrate(pattern = [50]) {
            if ('vibrate' in navigator) {
                navigator.vibrate(pattern);
            }
        }

        // ===========================================
        // GESTION DES CONNEXIONS SOCKET.IO
        // ===========================================

        socket.on('connect', () => {
            console.log('‚úÖ Connect√© au serveur');
            updateConnectionStatus(true);
            vibrate([100]); // Vibration de connexion
        });

        socket.on('disconnect', (reason) => {
            console.log('‚ùå D√©connexion:', reason);
            updateConnectionStatus(false);
        });

        socket.on('reconnect', () => {
            console.log('üîÑ Reconnexion r√©ussie');
            updateConnectionStatus(true);
            vibrate([50, 50, 100]); // Vibration de reconnexion
        });

        // R√©ception des donn√©es initiales
        socket.on('initial_data', (data) => {
            console.log('üì• Donn√©es initiales re√ßues', data);
            
            currentRequests.clear();
            data.requests.forEach(request => {
                currentRequests.set(request.id, request);
            });
            
            zones = data.zones;
            
            updateRequestsList();
            updateZonesSummary();
            updateConnectedUsers(data.connectedUsers);
        });

        // Gestion des √©v√©nements de demandes
        socket.on('new_request', (request) => {
            console.log('üì® Nouvelle demande:', request);
            currentRequests.set(request.id, request);
            addRequestToList(request);
            vibrate([100, 50, 100]); // Vibration pour nouvelle demande
        });

        socket.on('request_updated', (request) => {
            console.log('üîÑ Demande mise √† jour:', request);
            currentRequests.set(request.id, request);
            updateRequestInList(request);
            vibrate([50]); // Vibration l√©g√®re pour mise √† jour
        });

        socket.on('request_abandoned', (data) => {
            console.log('‚ùå Demande abandonn√©e:', data);
            const request = currentRequests.get(data.requestId);
            if (request) {
                request.status = 'pending';
                request.handledBy = null;
                request.handledByName = null;
                currentRequests.set(data.requestId, request);
                updateRequestInList(request);
            }
            
            // Fermer la modale si c'est celle qui √©tait ouverte
            if (currentRequestForZone && currentRequestForZone.requestId === data.requestId) {
                document.getElementById('zoneModalOverlay').style.display = 'none';
                currentRequestForZone = null;
                document.getElementById('confirmZoneBtn').disabled = true;
            }
        });

        socket.on('request_deleted', (data) => {
            currentRequests.delete(data.requestId);
            const element = document.querySelector(`[data-request-id="${data.requestId}"]`);
            if (element) element.remove();
        });

        // Gestion des mises √† jour de zones
        socket.on('zone_updated', (data) => {
            if (zones[data.zoneId]) {
                zones[data.zoneId].current = data.current;
                updateZonesSummary();
            }
        });

        socket.on('zone_updated_from_request', (data) => {
            if (zones[data.zoneId]) {
                zones[data.zoneId].current = data.current;
                updateZonesSummary();
                vibrate([100, 100, 100]); // Vibration pour attribution r√©ussie
            }
        });

        socket.on('users_count', (count) => {
            updateConnectedUsers(count);
        });

        socket.on('error', (error) => {
            console.error('‚ùå Erreur serveur:', error);
            vibrate([200, 100, 200]); // Vibration d'erreur
        });

        // ===========================================
        // GESTION DU FORMULAIRE DE DEMANDE
        // ===========================================

        function setupFormHandler() {
            const form = document.getElementById('requestForm');
            if (!form) return;

            form.addEventListener('submit', function(e) {
                e.preventDefault();
                
                // V√©rifier l'authentification
                if (!isAuthenticated) {
                    openAuthModal();
                    return false;
                }
                
                console.log('üìù Tentative de cr√©ation de demande...');
                
                const formData = {
                    userName: document.getElementById('userName').value.trim(),
                    placesNeeded: parseInt(document.getElementById('placesNeeded').value),
                    comment: document.getElementById('comment').value.trim()
                };
                
                console.log('üìä Donn√©es formulaire:', formData);
                
                // Validation
                if (!formData.userName || !formData.placesNeeded) {
                    console.log('‚ùå Validation √©chou√©e: champs manquants');
                    vibrate([200, 100, 200]); // Vibration d'erreur
                    return false;
                }
                
                if (formData.placesNeeded < 1 || formData.placesNeeded > 20) {
                    console.log('‚ùå Validation √©chou√©e: nombre de places invalide');
                    vibrate([200, 100, 200]); // Vibration d'erreur
                    return false;
                }
                
                // Sauvegarder le nom du cr√©ateur pour les prochaines fois
                saveCreatorName(formData.userName);
                
                console.log('üì§ Envoi de la demande:', formData);
                socket.emit('create_request', formData);
                
                // Reset du formulaire (sauf le nom qui reste pr√©-s√©lectionn√©)
                document.getElementById('placesNeeded').value = '';
                document.getElementById('comment').value = '';
                vibrate([100]); // Vibration de succ√®s
                
                return false;
            });
        }

        // ===========================================
        // GESTION DES DEMANDES
        // ===========================================

        function updateRequestsList() {
            const requestsList = document.getElementById('requestsList');
            requestsList.innerHTML = '';
            
            if (currentRequests.size === 0) {
                requestsList.innerHTML = `
                    <div class="empty-state">
                        <p>üì≠ Aucune demande en cours...</p>
                        <p>Les nouvelles demandes appara√Ætront ici automatiquement</p>
                    </div>
                `;
                return;
            }
            
            const sortedRequests = Array.from(currentRequests.values())
                .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
            
            sortedRequests.forEach(request => {
                addRequestToList(request);
            });
        }

        function addRequestToList(request) {
            const requestsList = document.getElementById('requestsList');
            const emptyState = requestsList.querySelector('.empty-state');
            if (emptyState) emptyState.remove();
            
            const requestElement = createRequestElement(request);
            requestsList.appendChild(requestElement);
        }

        function updateRequestInList(request) {
            const existing = document.querySelector(`[data-request-id="${request.id}"]`);
            if (existing) {
                const newElement = createRequestElement(request);
                existing.parentNode.replaceChild(newElement, existing);
            } else {
                addRequestToList(request);
            }
        }

        function createRequestElement(request) {
            const div = document.createElement('div');
            div.className = `request-card ${request.status}`;
            div.setAttribute('data-request-id', request.id);
            
            const date = new Date(request.timestamp);
            const formattedTime = date.toLocaleString('fr-FR', {
                hour: "2-digit",
                minute: "2-digit"
            });
            
            const statusTexts = {
                'pending': 'En attente',
                'in-progress': 'En cours de traitement',
                'available': 'Places attribu√©es',
                'not-available': 'Non disponible',
                'available-separated': 'Places attribu√©es (s√©par√©es)'
            };

            div.innerHTML = `
                <div class="request-header">
                    <div class="request-places">
                        <span class="places-count">${request.placesNeeded}</span>
                        <span class="places-label">place(s)</span>
                    </div>
                    <div class="status-badge status-${request.status}">
                        ${statusTexts[request.status]}
                    </div>
                </div>

                <div class="request-body">
                    <div class="request-info">
                        <div class="info-item">
                            <span class="icon">üë§</span>
                            <strong>${request.userName}</strong>
                        </div>
                        <div class="info-item">
                            <span class="icon">üïê</span>
                            ${formattedTime}
                        </div>
                        ${request.comment ? `
                            <div class="info-item">
                                <span class="icon">üí¨</span>
                                ${request.comment}
                            </div>
                        ` : ''}
                        ${request.assignedZone ? `
                            <div class="info-item">
                                <span class="icon">üìç</span>
                                Zone: ${zones[request.assignedZone]?.name || request.assignedZone}
                            </div>
                        ` : ''}
                        ${request.handledByName ? `
                            <div class="info-item">
                                <span class="icon">‚úã</span>
                                Trait√© par: ${request.handledByName}
                            </div>
                        ` : ''}
                    </div>

                    ${request.status === 'pending' ? `
                        <div class="request-actions">
                            <button class="btn btn-warning" onclick="takeInCharge('${request.id}')" ${!isAuthenticated ? 'disabled' : ''}>
                                ${isAuthenticated ? 'Prendre en charge' : 'üîí Connexion requise'}
                            </button>
                        </div>
                    ` : ''}
                </div>
            `;
            
            return div;
        }

        // ===========================================
        // ACTIONS SUR LES DEMANDES
        // ===========================================

        function takeInCharge(requestId) {
            // V√©rifier l'authentification
            if (!isAuthenticated) {
                openAuthModal();
                return;
            }
            
            console.log('‚è≥ Prise en charge de la demande:', requestId);
            vibrate([100]); // Feedback tactile
            
            socket.emit('update_request_status', {
                requestId: requestId,
                status: 'in-progress'
            });
            
            setTimeout(() => {
                openZoneModal(requestId, 'process-request');
            }, 100);
        }

        function abandonRequest(requestId) {
            console.log('‚ùå Abandon du traitement de la demande:', requestId);
            vibrate([100, 50, 100]); // Feedback d'abandon
            
            socket.emit('abandon_request', {
                requestId: requestId
            });
        }

        function updateRequestStatus(requestId, status) {
            console.log('üîÑ Mise √† jour statut:', requestId, status);
            socket.emit('update_request_status', {
                requestId: requestId,
                status: status
            });
        }

        // ===========================================
        // GESTION DE LA MODALE DE TRAITEMENT
        // ===========================================

        let currentModalStep = 'treatment'; // 'treatment' ou 'zone'

        function openZoneModal(requestId, action) {
            // V√©rifier l'authentification
            if (!isAuthenticated) {
                openAuthModal();
                return;
            }
            
            const request = currentRequests.get(requestId);
            if (!request) return;
            
            currentRequestForZone = { requestId, action };
            currentModalStep = 'treatment'; // Reset √† la premi√®re √©tape
            
            document.getElementById('modalRequestInfo').textContent = 
                `${request.userName} - ${request.placesNeeded} place(s)`;
            
            // Reset des √©l√©ments de la modale
            document.getElementById('handlerName').value = '';
            document.getElementById('treatmentChoice').style.display = 'none';
            document.getElementById('zoneChoice').style.display = 'none';
            document.getElementById('statusInfo').innerHTML = '';
            document.getElementById('confirmZoneBtn').disabled = true;
            document.getElementById('backBtn').style.display = 'none';
            
            // Restaurer le nom du gestionnaire sauvegard√©
            restoreHandlerName();
            
            // Reset des s√©lections
            const treatmentRadios = document.querySelectorAll('input[name="selectedTreatment"]');
            treatmentRadios.forEach(radio => radio.checked = false);
            
            if (action === 'process-request') {
                document.getElementById('modalTitle').textContent = 'üéØ Traiter la demande';
                document.getElementById('treatmentChoice').style.display = 'block';
                document.getElementById('confirmZoneBtn').textContent = '‚û°Ô∏è Continuer';
                currentModalStep = 'treatment';
                // Le nom est obligatoire pour passer √† l'√©tape suivante
                updateConfirmButtonState();
            } else {
                document.getElementById('modalTitle').textContent = 'üéØ Attribuer des places';
                currentRequestForZone.targetStatus = action;
                showZoneSelection(request, action);
                document.getElementById('confirmZoneBtn').textContent = '‚úÖ Confirmer l\'attribution';
                currentModalStep = 'zone';
            }
            
            document.getElementById('zoneModalOverlay').style.display = 'flex';
            vibrate([50]); // Feedback d'ouverture
        }

        function onTreatmentSelected() {
            console.log('üîò Traitement s√©lectionn√©');
            updateConfirmButtonState();
        }

        function updateConfirmButtonState() {
            const handlerName = document.getElementById('handlerName').value.trim();
            const selectedTreatment = document.querySelector('input[name="selectedTreatment"]:checked');
            const selectedZone = document.querySelector('input[name="selectedZone"]:checked');
            
            console.log('üîÑ Mise √† jour √©tat bouton:', {
                step: currentModalStep,
                handlerName: !!handlerName,
                selectedTreatment: !!selectedTreatment,
                selectedZone: !!selectedZone
            });
            
            if (currentRequestForZone?.action === 'process-request') {
                if (currentModalStep === 'treatment') {
                    // Premi√®re √©tape : nom + traitement obligatoires
                    document.getElementById('confirmZoneBtn').disabled = !(handlerName && selectedTreatment);
                } else if (currentModalStep === 'zone') {
                    // Deuxi√®me √©tape : zone obligatoire (nom d√©j√† valid√©)
                    document.getElementById('confirmZoneBtn').disabled = !selectedZone;
                }
            } else {
                // Mode attribution directe : nom ET zone
                document.getElementById('confirmZoneBtn').disabled = !(handlerName && selectedZone);
            }
        }

        function goBackToTreatmentChoice() {
            if (!currentRequestForZone) return;
            
            console.log('‚¨ÖÔ∏è Retour √† la premi√®re √©tape');
            
            // Revenir √† la premi√®re √©tape
            currentModalStep = 'treatment';
            document.getElementById('treatmentChoice').style.display = 'block';
            document.getElementById('zoneChoice').style.display = 'none';
            document.getElementById('statusInfo').innerHTML = '';
            document.getElementById('backBtn').style.display = 'none';
            document.getElementById('confirmZoneBtn').textContent = '‚û°Ô∏è Continuer';
            document.getElementById('modalTitle').textContent = 'üéØ Traiter la demande';
            
            // Reset de la s√©lection de zone
            const zoneRadios = document.querySelectorAll('input[name="selectedZone"]');
            zoneRadios.forEach(radio => radio.checked = false);
            
            updateConfirmButtonState();
            vibrate([30]); // Feedback de retour
        }

        function selectTreatment(treatmentType) {
            const request = currentRequests.get(currentRequestForZone.requestId);
            if (!request) return;
            
            currentRequestForZone.targetStatus = treatmentType;
            
            document.getElementById('treatmentChoice').style.display = 'none';
            showZoneSelection(request, treatmentType);
            document.getElementById('confirmZoneBtn').textContent = '‚úÖ Confirmer l\'attribution';
            
            onZoneSelected();
            vibrate([50]); // Feedback de s√©lection
        }

        function showZoneSelection(request, treatmentType) {
            document.getElementById('zoneChoice').style.display = 'block';
            
            const statusInfo = document.getElementById('statusInfo');
            if (treatmentType === 'available-separated') {
                statusInfo.innerHTML = `
                    <div class="separated-info">
                        ‚ö†Ô∏è <strong>Attribution avec places s√©par√©es</strong><br>
                        <small>Les personnes ne seront pas assises c√¥te √† c√¥te</small>
                    </div>
                `;
            } else {
                statusInfo.innerHTML = `
                    <div class="normal-info">
                        ‚úÖ <strong>Attribution normale</strong><br>
                        <small>Les personnes seront assises ensemble</small>
                    </div>
                `;
            }
            
            const zoneSelection = document.getElementById('zoneSelection');
            zoneSelection.innerHTML = '';
            
            Object.entries(zones).forEach(([zoneId, zone]) => {
                const available = zone.current >= request.placesNeeded;
                const div = document.createElement('div');
                div.className = `zone-option ${available ? 'available' : 'unavailable'}`;
                div.innerHTML = `
                    <input type="radio" name="selectedZone" value="${zoneId}" 
                           id="zone-${zoneId}" ${available ? '' : 'disabled'}
                           onchange="onZoneSelected()">
                    <label for="zone-${zoneId}">
                        <strong>${zone.name}</strong>
                        <span class="zone-capacity">${zone.current}/${zone.max} places</span>
                        ${available ? '‚úÖ' : '‚ùå'}
                    </label>
                `;
                zoneSelection.appendChild(div);
            });
            
            onZoneSelected();
        }

        function closeZoneModal(isAbandon = true) {
            // V√©rifier si on est en train d'abandonner une demande en cours de traitement
            // Seulement si c'est un abandon volontaire (clic sur la croix)
            if (isAbandon && currentRequestForZone && currentRequestForZone.action === 'process-request') {
                const request = currentRequests.get(currentRequestForZone.requestId);
                if (request && request.status === 'in-progress') {
                    // Demander confirmation avant d'abandonner
                    if (confirm('Abandonner le traitement de cette demande ?\n\nElle repassera en attente pour permettre √† d\'autres de la traiter.')) {
                        abandonRequest(currentRequestForZone.requestId);
                    } else {
                        // L'utilisateur a annul√© l'abandon, on garde la modale ouverte
                        return;
                    }
                }
            }
            
            document.getElementById('zoneModalOverlay').style.display = 'none';
            currentRequestForZone = null;
            document.getElementById('confirmZoneBtn').disabled = true;
            document.getElementById('backBtn').style.display = 'none';
            vibrate([30]); // Feedback de fermeture
        }

        function onZoneSelected() {
            updateConfirmButtonState();
        }

        function confirmZoneAssignment() {
            if (!currentRequestForZone) return;
            
            const handlerName = document.getElementById('handlerName').value.trim();
            if (!handlerName) return;
            
            // Sauvegarder le nom du gestionnaire pour les prochaines fois
            saveHandlerName(handlerName);
            
            // Si on est dans le processus de traitement d'une demande
            if (currentRequestForZone.action === 'process-request') {
                if (currentModalStep === 'treatment') {
                    // √âTAPE 1 : R√©cup√©rer le traitement s√©lectionn√© et passer √† l'√©tape 2
                    const selectedTreatment = document.querySelector('input[name="selectedTreatment"]:checked')?.value;
                    if (!selectedTreatment) return;
                    
                    // Assigner le type de traitement
                    currentRequestForZone.targetStatus = selectedTreatment;
                    
                    // Passer √† l'√©tape 2 : s√©lection de zone
                    currentModalStep = 'zone';
                    document.getElementById('treatmentChoice').style.display = 'none';
                    
                    const request = currentRequests.get(currentRequestForZone.requestId);
                    showZoneSelection(request, selectedTreatment);
                    
                    // Mettre √† jour les √©l√©ments de la modale
                    document.getElementById('confirmZoneBtn').textContent = '‚úÖ Confirmer l\'attribution';
                    document.getElementById('backBtn').style.display = 'inline-block';
                    document.getElementById('modalTitle').textContent = 'üéØ S√©lectionner la zone';
                    
                    updateConfirmButtonState();
                    vibrate([50]); // Feedback tactile
                    
                } else if (currentModalStep === 'zone') {
                    // √âTAPE 2 : Valider la zone s√©lectionn√©e
                    const selectedZone = document.querySelector('input[name="selectedZone"]:checked')?.value;
                    if (!selectedZone) return;
                    
                    console.log('üéØ Attribution finale:', currentRequestForZone.requestId, selectedZone, handlerName);
                    
                    socket.emit('update_request_status', {
                        requestId: currentRequestForZone.requestId,
                        status: currentRequestForZone.targetStatus,
                        assignedZone: selectedZone,
                        handledByName: handlerName
                    });
                    
                    vibrate([100, 50, 100]); // Feedback de confirmation
                    closeZoneModal(false); // false = pas un abandon, juste une fermeture apr√®s confirmation
                }
            } else {
                // Mode attribution directe (ancienne logique conserv√©e)
                const selectedZone = document.querySelector('input[name="selectedZone"]:checked')?.value;
                if (!selectedZone) return;
                
                console.log('üéØ Attribution directe:', currentRequestForZone.requestId, selectedZone, handlerName);
                
                socket.emit('update_request_status', {
                    requestId: currentRequestForZone.requestId,
                    status: currentRequestForZone.targetStatus,
                    assignedZone: selectedZone,
                    handledByName: handlerName
                });
                
                vibrate([100, 50, 100]); // Feedback de confirmation
                closeZoneModal(false); // false = pas un abandon, juste une fermeture apr√®s confirmation
            }
        }

        // ===========================================
        // GESTION DE L'INTERFACE
        // ===========================================

        function updateConnectionStatus(connected) {
            // Pas d'affichage de statut dans cette version mobile
        }

        function updateConnectedUsers(count) {
            connectedUsers = count;
        }

        function updateZonesSummary() {
            const totalAvailable = Object.values(zones).reduce((sum, zone) => sum + zone.current, 0);
            document.getElementById('totalAvailable').textContent = totalAvailable;
        }

        function filterRequests() {
            const filter = document.getElementById('statusFilter').value;
            const cards = document.querySelectorAll('.request-card');
            
            cards.forEach(card => {
                const status = card.classList[1];
                card.style.display = (filter === 'all' || status === filter) ? 'block' : 'none';
            });
        }

        // ===========================================
        // INITIALISATION
        // ===========================================

        document.addEventListener('DOMContentLoaded', () => {
            console.log('üöÄ Application des demandes initialis√©e (version mobile + auth)');
            
            // V√©rifier le statut d'authentification
            checkAuthStatus();
            
            // Configuration du gestionnaire de formulaire
            setupFormHandler();
            
            // Restaurer les noms sauvegard√©s de l'utilisateur
            restoreUserNames();
            
            // Listener pour sauvegarder imm√©diatement le nom du cr√©ateur quand il change
            const userNameSelect = document.getElementById('userName');
            if (userNameSelect) {
                userNameSelect.addEventListener('change', function(e) {
                    const selectedName = e.target.value.trim();
                    if (selectedName) {
                        saveCreatorName(selectedName);
                        console.log('üéØ Nom cr√©ateur s√©lectionn√©:', selectedName);
                    }
                });
            }
            
            const handlerNameInput = document.getElementById('handlerName');
            if (handlerNameInput) {
                handlerNameInput.addEventListener('change', updateConfirmButtonState);
            }

            // Listener pour la touche Entr√©e dans le champ mot de passe
            document.getElementById('authPassword').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    authenticate();
                }
            });

            // Ajout de listeners pour le feedback tactile
            document.querySelectorAll('.btn, .zone, .request-card').forEach(element => {
                element.addEventListener('touchstart', () => {
                    vibrate([30]);
                }, { passive: true });
            });
        });

        // Gestion des erreurs globales
        window.addEventListener('error', (event) => {
            console.error('‚ùå Erreur JavaScript:', event.error);
            vibrate([200, 100, 200]); // Vibration d'erreur
        });

        // Emp√™cher le zoom sur double-tap
        let lastTouchEnd = 0;
        document.addEventListener('touchend', function (event) {
            const now = (new Date()).getTime();
            if (now - lastTouchEnd <= 300) {
                event.preventDefault();
            }
            lastTouchEnd = now;202
        }, false);
    </script>
</body>
</html>